library(readr)
library(tidyverse)
library(MASS)
library(ggplot2)
library(dplyr)
library(here)
library(GGally)
library(ResourceSelection)
library(car)
library(caret)
root = here()
bank_20 = read.csv(paste(root,"/data/bank-additional/bank-additional-full.csv", sep = ""), sep=";")
bank_17 = read.csv(paste(root,"/data/bank/bank-full.csv", sep = ""), sep = ";")
clean_bank_20 %>% ggplot(aes(x = newpdays, fill = y)) + geom_bar(position = "fill")
install.packages("pROC")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(warning = F)
knitr::opts_chunk$set(message = F)
library(dplyr)
library(ggplot2)
library(tidyr)
library(SDMTools)
install.packages("SDMTools")
library(dplyr)
library(ggplot2)
library(tidyr)
#library(SDMTools)
library(readr)
library(digest)
library(ISLR)
library(car)
library(leaps)
library( Matrix)
library(foreach)
library(glmnet)
library(gridExtra)
library(lsmeans)
library(limma)
install.packages("limma")
library(dplyr)
library(ggplot2)
library(tidyr)
#library(SDMTools)
library(readr)
library(digest)
library(ISLR)
library(car)
library(leaps)
library( Matrix)
library(foreach)
library(glmnet)
library(gridExtra)
library(lsmeans)
#library(limma)
library(Sleuth3)
library(tseries)
library(forecast)
library(ggplot2)
library(MASS)
library(mvtnorm)
library(epitools)
library(samplesizeCMH)
library(caret)
library(GGally)
library(glmnet)
library(bestglm)
library(data.table)
library(broom)
library(plyr)
library(repr)
library(ResourceSelection)
library(ROCR)
library(pROC)
library(dplyr)
library(ggplot2)
library(tidyr)
#library(SDMTools)
library(readr)
library(digest)
library(ISLR)
library(car)
library(leaps)
library( Matrix)
library(foreach)
library(glmnet)
library(gridExtra)
library(lsmeans)
#library(limma)
library(Sleuth3)
library(tseries)
library(forecast)
library(ggplot2)
library(MASS)
library(mvtnorm)
library(epitools)
library(samplesizeCMH)
library(caret)
library(GGally)
library(glmnet)
library(bestglm)
library(data.table)
library(broom)
library(plyr)
library(repr)
library(ResourceSelection)
library(ROCR)
library(pROC)
summary(bank_20)
attach(bank_20)
ftable(addmargins(table(bank_20$y,bank_20$job)))
job=factor(job)
ftable(addmargins(table(y, marital)))
marital=factor(marital)
ftable(addmargins(table(y,education)))
education=factor(education)
ftable(addmargins(table(y,default)))
education=factor(default)
ftable(addmargins(table(y,housing)))
job=factor(housing)
ftable(addmargins(table(y, loan)))
marital=factor(loan)
ftable(addmargins(table(y,contact)))
education=factor(contact)
ftable(addmargins(table(y,month)))
education=factor(month)
ftable(addmargins(table(y,day_of_week)))
education=factor(day_of_week)
ftable(addmargins(table(y,poutcome)))
education=factor(poutcome)
#to get proportions that make sense
prop.table(table(bank_20$y,bank_20$job),2)
prop.table(table(y,education),2)
prop.table(table(y,default),2)
prop.table(table(y,housing),2)
prop.table(table(y,loan),2)
prop.table(table(y,contact),2)
prop.table(table(y,month),2)
prop.table(table(y,day_of_week),2)
prop.table(table(y,poutcome),2)
#Visualize
p1= bank_20 %>% ggplot(aes(x = job,  y = y, fill = y))
p2= p1+ geom_col() + labs(title = "Credict Approval", x= "Job", y= "Aproved loan")
p3= p2+ theme( axis.text = element_text(size = rel(0.8),angle =45, hjust = 1, vjust = 1) )
p3
p1= bank_20 %>% ggplot(aes(x = education,  y = y, fill = y))
p2= p1+ geom_col() + labs(title = "Credict Approval", x= "Education", y= "Aproved loan")
p3= p2+ theme( axis.text = element_text(size = rel(0.8),angle =45, hjust = 1, vjust = 1) )
p3
p1= bank_20 %>% ggplot(aes(x = default,  y = y, fill = y))
p2= p1+ geom_col() + labs(title = "Credict Approval", x= "Default", y= "Aproved loan")
p3= p2+ theme( axis.text = element_text(size = rel(0.8),angle =45, hjust = 1, vjust = 1) )
p3
p1= bank_20 %>% ggplot(aes(x = marital,  y = y, fill = y))
p2= p1+ geom_col() + labs(title = "Credict Approval", x= "Marital", y= "Aproved loan")
p3= p2+ theme( axis.text = element_text(size = rel(0.8),angle =45, hjust = 1, vjust = 1) )
p3
p1= bank_20 %>% ggplot(aes(x = housing,  y = y, fill = y))
p2= p1+ geom_col() + labs(title = "Credict Approval", x= "Housing", y= "Aproved loan")
p3= p2+ theme( axis.text = element_text(size = rel(0.8),angle =45, hjust = 1, vjust = 1) )
p3
p1= bank_20 %>% ggplot(aes(x = loan,  y = y, fill = y))
p2= p1+ geom_col() + labs(title = "Credict Approval", x= "Loan", y= "Aproved loan")
p3= p2+ theme( axis.text = element_text(size = rel(0.8),angle =45, hjust = 1, vjust = 1) )
p3
p1= bank_20 %>% ggplot(aes(x = contact,  y = y, fill = y))
p2= p1+ geom_col() + labs(title = "Credict Approval", x= "Contact", y= "Aproved loan")
p3= p2+ theme( axis.text = element_text(size = rel(0.8),angle =45, hjust = 1, vjust = 1) )
p3
p1= bank_20 %>% ggplot(aes(x = month,  y = y, fill = y))
p2= p1+ geom_col() + labs(title = "Credict Approval", x= "Month", y= "Aproved loan")
p3= p2+ theme( axis.text = element_text(size = rel(0.8),angle =45, hjust = 1, vjust = 1) )
p3
p1= bank_20 %>% ggplot(aes(x = day_of_week,  y = y, fill = y))
p2= p1+ geom_col() + labs(title = "Credict Approval", x= "Day of week", y= "Aproved loan")
p3= p2+ theme( axis.text = element_text(size = rel(0.8),angle =45, hjust = 1, vjust = 1) )
p3
p1= bank_20 %>% ggplot(aes(x = poutcome,  y = y, fill = y))
p2= p1+ geom_col() + labs(title = "Credict Approval", x= "Poutcome", y= "Aproved loan")
p3= p2+ theme( axis.text = element_text(size = rel(0.8),angle =45, hjust = 1, vjust = 1) )
p3
#to get proportions that make sense
prop.table(table(bank_20$y,bank_20$job),2)
clean_bank_20 %>% ggplot(aes(x = job, y = marital, fill = y)) + geom_bar(stat = "count")
clean_bank_20 %>% ggplot(aes(x = job, y = marital, fill = y))  + geom_density()
clean_bank_20 %>% ggplot(aes(x = job, y = marital, fill = y))  + geom_jitter()
clean_bank_20 %>% ggplot(aes(x = job, y = marital, fill = y))  + geom_tile()
clean_bank_20 %>% ggplot(aes(x = job, y = marital))  + geom_tile()
?geom_tile
clean_bank_20 %>% ggplot(aes(x = job, y = marital))  + geom_tile(fill = density)
clean_bank_20 %>% ggplot(aes(x = job, y = marital))  + geom_tile(fill = "density")
clean_bank_20 %>% ggplot(aes(x = job, y = marital))  + geom_tile()
clean_bank_20 %>% ggplot(aes(x = job, y = marital))  + geom_tile()
clean_bank_20 %>% ggplot(aes(x = job, y = marital))  + stat_density()
clean_bank_20 %>% ggplot(aes(x = job, fill = marital))  + stat_bar(stat = "count")
clean_bank_20 %>% ggplot(aes(x = job, fill = marital))  + geom_bar(stat = "count")
clean_bank_20 %>% ggplot(aes(x = job, fill = marital))  + geom_bar(stat = "fill")
clean_bank_20 %>% ggplot(aes(x = job, fill = marital))  + geom_bar(stat = "density")
clean_bank_20 %>% ggplot(aes(x = job, fill = marital))  + geom_bar(stat = "count")
clean_bank_20 %>% ggplot(aes(x = job, fill = marital))  + geom_bar(position = "fill")
summary(clean_bank_20$nr.employed)
min(bank_20$pdays)
summary(bank_20$previous)
previous = bank_20$previous
sum(if(bank_20$previous > 0))
sum(if(bank_20$previous > 0,1))
sum(ifelse(bank_20$previous > 0,1,0))
summary(clean_bank_20$newpdays)
summary(as.factor(clean_bank_20$newpdays))
600 + 194 + 62 + 659
clean_bank_20 %>% ggplot(aes(x = job, y = nr.employed, fill = y)) + geom_boxplot()
clean_bank_20 %>% ggplot(aes(x = job, y = cons.conf.idx, fill = y)) + geom_boxplot()
clean_bank_20 %>% ggplot(aes(x = month, y = cons.conf.idx, fill = y)) + geom_boxplot()
clean_bank_20 %>% ggplot(aes(x = month, y = cons.price.idx, fill = y)) + geom_boxplot()
clean_bank_20 %>% ggplot(aes(x = month, y = log(duration), fill = y)) + geom_boxplot()
clean_bank_20 %>% ggplot(aes(x = euribor3m, y = cons.conf.idx, color = y)) + geom_point()
clean_bank_20 %>% ggplot(aes(x = euribor3m, y = cons.conf.idx, color = y)) + geom_jitter()
#90% yes in train
#40/60 test split
which(clean_bank_20$y == "yea")
#90% yes in train
#40/60 test split
which(clean_bank_20$y == "yes")
yes_indices = which(clean_bank_20$y == "yes")
yes_train_indices = sample(length(yes_indices), yes_indices * .9)
yes_train = clean_bank_20[yes_train_indices,]
yes_test = clean_bank_20[-yes_train_indices,]
dim(yes_train)
dim(yes_test)
length(yes_indices)
yes_train_indices
yes_train_indices = sample(length(yes_indices), length(yes_indices) * .9)
length(yes_train_indices)
yes_train = clean_bank_20[yes_train_indices,]
yes_test = clean_bank_20[-yes_train_indices,]
dim(yes_train)
dim(yes_test)
dim(yes_train_indices)
length(yes_train_indices)
no_indices = which(clean_bank_20$y == "no")
#
no_train_indices = sample(length(no_indices), length(yes_indices))
length(no_train_indices)
4640 / (4640 + 4176)
balanced_train = clean_bank_20[c(yes_train_indices, no_train_indices)]
balanced_train = clean_bank_20[c(yes_train_indices, no_train_indices),]
dim(balanced_train)
summary(balanced_train$y)
length(yes_indices)
length(yes_train_indices)
length(no_train_indices)
temp = clean_bank_20[yes_indices]
temp = clean_bank_20[yes_indices,]
summary(temp$y)
yes_indices = which(clean_bank_20$y == "yes")
yes_train_indices = sample(length(yes_indices), length(yes_indices) * .9)
no_indices = which(clean_bank_20$y == "no")
#
no_train_indices = sample(length(no_indices), length(yes_indices))
balanced_train = clean_bank_20[c(yes_train_indices, no_train_indices),]
summary(balanced_train)
train_indices = c(no_train_indices,yes_train_indices)
length(train_indices)
balanced_train = clean_bank_20[train_indices,]
summary(balanced_train$y)
sample(c(1,3,5,7,9,11),2)
sample(c(1,3,5,7,9,11),2)
sample(c(1,3,5,7,9,11),2)
sample(c(1,3,5,7,9,11),2)
yes_indices = which(clean_bank_20$y == "yes")
yes_train_indices = sample(yes_indices, length(yes_indices) * .9)
no_indices = which(clean_bank_20$y == "no")
#
no_train_indices = sample(no_indices, length(yes_indices))
train_indices = c(no_train_indices,yes_train_indices)
balanced_train = clean_bank_20[train_indices,]
dim(balanced_train)
summary(balanced_train$y)
4640/8816
test_bank_20 = clean_bank_20[-train_indices,]
dim(test_bank_20)
balanced_train_bank_20 = clean_bank_20[train_indices,]
summary(test_bank_20$y)
?transmute
altpdays_cat = ifelse(bank_20$pdays == 999, 0, 1)
sum(altpdays_cat)
alt_pdays_cat = ifelse(bank_20$pdays == 999, 0, 1)
#remains the same as original pdays,
alt_pdays_cont = bank_20$pdays
alt_clean_bank_20 = bank_20
alt_clean_bank_20$pdays_cat = alt_pdays_cat
names(alt_clean_bank_20)
library(dplyr)
library(ggplot2)
library(tidyr)
library(SDMTools)
library(dplyr)
library(ggplot2)
library(tidyr)
#library(SDMTools)
library(readr)
library(digest)
library(ISLR)
library(car)
library(leaps)
library( Matrix)
library(foreach)
library(glmnet)
library(gridExtra)
library(lsmeans)
library(limma)
dat.train.x <- model.matrix(y~ .,balanced_train_bank_20)
dat.train.y<-balanced_train_bank_20[,21]
cvfit <- cv.glmnet(dat.train.x, dat.train.y, family = "binomial", type.measure = "class", nlambda = 1000)
library(dplyr)
library(ggplot2)
library(tidyr)
#library(SDMTools)
library(readr)
library(digest)
library(ISLR)
library(car)
library(leaps)
library( Matrix)
library(foreach)
library(glmnet)
library(gridExtra)
library(lsmeans)
library(limma)
library(dplyr)
library(ggplot2)
library(tidyr)
#library(SDMTools)
library(readr)
library(digest)
library(ISLR)
library(car)
library(leaps)
library( Matrix)
library(foreach)
library(glmnet)
library(gridExtra)
library(lsmeans)
#library(limma)
library(Sleuth3)
library(tseries)
library(forecast)
library(ggplot2)
library(MASS)
library(mvtnorm)
library(epitools)
library(samplesizeCMH)
library(caret)
library(GGally)
library(glmnet)
library(bestglm)
library(data.table)
library(broom)
library(plyr)
library(repr)
library(ResourceSelection)
library(ROCR)
library(pROC)
logr<-glm(y ~ job + education + default + contact +duration + poutcome + pdays + campaign, family = binomial(link = "logit"),data = balanced_train_bank_20)
dat.train.x <- as.data.frame(balanced_train_bank_20)
dat.train.y <- balanced_train_bank_20$y
dat.train.y <- as.factor(as.character(dat.train.y))
dat.test.x<-as.data.frame(test_bank_20)
dat.test.y<- test_bank_20$y
dat.test.y <- as.factor(as.character(dat.test.y))
logr2<-glm(y ~ job + education + default + contact +duration + poutcome + pdays + campaign, family = binomial(link = "logit"),data = balanced_train_bank_20)
logr<-glm(y ~ job + education + default + contact +duration + pdays + campaign + poutcome, family = binomial(link = "logit"),data = balanced_train_bank_20)
logr<-glm(y ~ job + education + default + contact +duration + newpdays + campaign + poutcome, family = binomial(link = "logit"),data = balanced_train_bank_20)
logr.probs<-predict(logr, newdata=test_bank_20)
my.cor<-cor(bank_20[,-c(2,3,4,5,6,7,8,9,10,15,21)])
my.cor
library(gplots)
library(ggplot2)
heatmap.2(my.cor,col=redgreen(75),
density.info="none", trace="none", dendrogram=c("row"),
symm=F,symkey=T,symbreaks=T, scale="none")
temp = read.csv("/Users/zmartygirl/Documents/MSDS_SMU/reviews.csv")
dim(temp)
temp = read.csv("/Users/zmartygirl/Documents/MSDS_SMU/calendar.csv")
dim(temp)
summary(clean_bank_20$default)
clean_bank_20 = as.data.frame(bank_20)
#pdays- about 40k of the 41k are at level 999, no previous contact
#could bin this data
hist(bank_20$pdays)
temp = bank_20 %>% filter(pdays != 999)
dim(temp)
hist(temp$pdays)
summary(temp$pdays)
#within 5 days, 10 , 15, 30 and never
clean_bank_20$newpdays = case_when(bank_20$pdays == 999 ~ "Never",
bank_20$pdays >= 15 ~ "Within 30 Days",
bank_20$pdays >= 10 & bank_20$pdays < 15 ~ "Within 15 Days",
bank_20$pdays >= 5 & bank_20$pdays < 10 ~ "Within 10 Days",
bank_20$pdays < 5 ~ "Within 5 Days")
clean_bank_20 = dplyr::select(clean_bank_20, -pdays)
#Dr Turner's other suggestion
#Set up a categorical variable to turn the continuous variable on or off.
#any use of this would have to be both in tandem
#ie y ~ altpdays_cat*altpdays_cont
alt_pdays_cat = ifelse(bank_20$pdays == 999, 0, 1)
#remains the same as original pdays,
alt_clean_bank_20 = bank_20
alt_clean_bank_20$pdays_cat = alt_pdays_cat
#Currently produces a train set of 52 n / 48 y
#90/10 yes train test split
set.seed(1234)
yes_indices = which(clean_bank_20$y == "yes")
yes_train_indices = sample(yes_indices, length(yes_indices) * .9)
no_indices = which(clean_bank_20$y == "no")
#
no_train_indices = sample(no_indices, length(yes_indices))
train_indices = c(no_train_indices,yes_train_indices)
balanced_train_bank_20 = clean_bank_20[train_indices,]
test_bank_20 = clean_bank_20[-train_indices,]
summary(balanced_train_bank_20$default)
summary(clean_bank_20$default)
# Build X_train, y_train, X_test, y_test
X_train <- balanced_train_bank_20[,-c(2,3,4,5,6,7,8,9,10,15,21)]
y_train<-balanced_train_bank_20[,21]
X_test <- test_bank_20[,-c(2,3,4,5,6,7,8,9,10,15,21)]
y_test <- test_bank_20[,21]
mylda<-lda(y ~ age + duration + campaign+pdays + previous + emp.var.rate + cons.price.idx + cons.conf.idx + euribor3m + nr.employed, data= balanced_train_bank_20)
names(balanced_train_bank_20)
library(readr)
library(tidyverse)
library(MASS)
library(ggplot2)
library(dplyr)
library(here)
library(GGally)
library(ResourceSelection)
library(car)
library(caret)
root = here()
bank_20 = read.csv(paste(root,"/data/bank-additional/bank-additional-full.csv", sep = ""), sep=";")
bank_17 = read.csv(paste(root,"/data/bank/bank-full.csv", sep = ""), sep = ";")
clean_bank_20 = as.data.frame(bank_20)
#pdays- about 40k of the 41k are at level 999, no previous contact
#could bin this data
hist(bank_20$pdays)
temp = bank_20 %>% filter(pdays != 999)
dim(temp)
hist(temp$pdays)
summary(temp$pdays)
#within 5 days, 10 , 15, 30 and never
clean_bank_20$newpdays = case_when(bank_20$pdays == 999 ~ "Never",
bank_20$pdays >= 15 ~ "Within 30 Days",
bank_20$pdays >= 10 & bank_20$pdays < 15 ~ "Within 15 Days",
bank_20$pdays >= 5 & bank_20$pdays < 10 ~ "Within 10 Days",
bank_20$pdays < 5 ~ "Within 5 Days")
#clean_bank_20 = dplyr::select(clean_bank_20, -pdays)
#Dr Turner's other suggestion
#Set up a categorical variable to turn the continuous variable on or off.
#any use of this would have to be both in tandem
#ie y ~ altpdays_cat*altpdays_cont
alt_pdays_cat = ifelse(bank_20$pdays == 999, 0, 1)
#remains the same as original pdays,
alt_clean_bank_20 = bank_20
alt_clean_bank_20$pdays_cat = alt_pdays_cat
# Build X_train, y_train, X_test, y_test
X_train <- balanced_train_bank_20[,-c(2,3,4,5,6,7,8,9,10,15,21)]
y_train<-balanced_train_bank_20[,21]
X_test <- test_bank_20[,-c(2,3,4,5,6,7,8,9,10,15,21)]
y_test <- test_bank_20[,21]
mylda<-lda(y ~ age + duration + campaign + pdays + previous + emp.var.rate + cons.price.idx + cons.conf.idx + euribor3m + nr.employed, data= balanced_train_bank_20)
#Currently produces a train set of 52 n / 48 y
#90/10 yes train test split
set.seed(1234)
yes_indices = which(clean_bank_20$y == "yes")
yes_train_indices = sample(yes_indices, length(yes_indices) * .9)
no_indices = which(clean_bank_20$y == "no")
#
no_train_indices = sample(no_indices, length(yes_indices))
train_indices = c(no_train_indices,yes_train_indices)
balanced_train_bank_20 = clean_bank_20[train_indices,]
test_bank_20 = clean_bank_20[-train_indices,]
# Build X_train, y_train, X_test, y_test
X_train <- balanced_train_bank_20[,-c(2,3,4,5,6,7,8,9,10,15,21)]
y_train<-balanced_train_bank_20[,21]
X_test <- test_bank_20[,-c(2,3,4,5,6,7,8,9,10,15,21)]
y_test <- test_bank_20[,21]
mylda<-lda(y ~ age + duration + campaign + pdays + previous + emp.var.rate + cons.price.idx + cons.conf.idx + euribor3m + nr.employed, data= balanced_train_bank_20)
pred<-predict(mylda,newdata=X_test )$class
Truth<-y_test
x<-table(pred,Truth) # Creating a confusion matrix
x
#Missclassification Error
ME<-(x[2,1]+x[1,2])/sum(x)
FP<-x[2,1]/(x[2,1]+x[1,1])
FN<-x[1,2]/(x[1,2]+x[2,2])
ses<-x[2,2]/(x[2,2]+x[1,2])
sp<-x[1,1]/(x[1,1]+x[2,1])
accuracy <- x
AC<- sum(diag(accuracy))/sum(accuracy)
TP= 1-FN
AC
TP
ME
FP
FN
ses
sp
#Calculating overall accuracy
oneminusME<-1-ME
oneminusME
101 + 363
383/464
